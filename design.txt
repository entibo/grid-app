Grid: 
  Grid of cells 
  width/height/infinite?
Cell: 
  Position on the grid (x,y)
  Either empty, or contains exactly one character (e.g. "虫")
  Defaults to empty
  May possess metadata:
    History, notes, link, styles
Viewport:
  Subset of the grid displayed to the user (x,y,w,h)
  (x,y) default to (0,0)
  (w,h) default to the maximum available space on the user's screen
Viewport position:
  Position relative to viewport
Cursor: 
  Position on the grid (x,y)
  Defaults to top-left (0,0)
Cursor position:
  Position of the cursor 
  Must be in viewport
Cursor cell:
  Cell at the cursor position (under the cursor)
Selection: 
  One or more cells
  Must include the cursor cell 
  Defaults to the cursor cell 
  Cannot contain duplicates

Moving cursor:
  New cursor position is outside viewport:
    Move viewport such that cursor position is in viewport 

Expand selection: 
  Selection is multiple cells: 
    Expand selection on each cell independently and combine the results, removing duplicates

Move selection: 
  Move the selection cells by one cell
  Destination cells are displaced:
    Non-empty destination cells are not overwritten by the selection cells
    They are moved to the empty cells left behind after the move
  Selection is multiple cells: 
    Move each cell of selection independently:
      In an order determined by their position and the movement direction

Arrow UP/DOWN/LEFT/RIGHT:
  Move cursor by one cell 
  CTRL: move cursor up to next empty cell  
  SHIFT: expand selection up to new cursor position
  ALT: move selection by one cell 

Home (, End):
  Move cursor to first (, last) column of viewport, then document
  CTRL: move cursor vertically instead of horizontally

PageUp (, PageDown):
  Move the viewport up (, down) by 100% of the viewport height
  Keep cursor in same viewport position 
  Set selection to cursor 

Click cell:
  Set cursor to cell 
  Set selection to cell
  SHIFT or CTRL: add cell to selection

Click cell and drag:
  Set cursor to cell
  Set selection to every cell overlapping click-drag rectangle
  SHIFT or CTRL: add to selection every cell overlapping click-drag rectangle 
  ALT: move clicked cell to drag destination
    Selection is multiple cells and clicked cell is selected:
      Move selection cells by relative amount, based on click-drag rectangle
    Destination cells swap positions with the moved cells 

Escape:
  Selection is multiple cells: set selection to cursor cell

Erase:
  Make cell empty

Backspace (, Delete):
  Erase selection cells, set selection to cursor
  Selection is single empty cell: move cursor left (, right)
  CTRL: erase up to next empty cell
  SHIFT: erase vertically instead of horizontally

Enter(, Tab):
  Insert empty cell after? cursor, pushing existing cells down (, right)
  SHIFT: remove cell before cursor, pulling existing cells up (, left)

Space:
  Placeholder action performed with selection cells' contents as argument
  For example, lookup in dictionary

Copy (CTRL+C):
  Copy selection cells to clipboard
Cut (CTRL+X):
  Copy, then erase

Paste (CTRL+V):
  Paste clipboard contents at selection 
    Spaces are interpreted as empty cells
    Newlines are interpreted as cells on a lower row, with the same starting column
  Expand or shrink selection to fit pasted contents 

Start typing:
  Begin insert mode

Insert mode:
  Idk really
  Overwrite selection cells' contents with user input
  


Dashed outline 
  Initially hidden
  When holding alt and hovering the grid:
    * Only after some movement has occurred 
    Set "cursor: pointer"
    Hovering selection: outline selection 
    Hovering cell outside selection: outline cell 
    Releasing alt hides the outline and cancels any movement action
    Clicking and dragging:
      Outline moves relative to drag


Note on textarea focus
  I want to set focus to it as soon as user clicks on the grid
  but the clicking itself can move focus away
  option 1. mousedown event.preventDefault()
  option 2. setTimeout(() => focus(), 0)
  option 3. TBD


----

Refactor to account for 漢字 being 2-wide 

# Preamble

Do we allow selecting FREELY and then worry about which cells 
make it or don't depending or our use case? 

Or do we force and SNAP the selection to guarantee that there
are no cells partially selected?

# generalize to any width and height?

# how are large elements serialized?

CJK 漢 -> 漢
2x2 letter X -> X²

I²M²P²O²R²T²A²N²T²

漢²字²

字²


# is cell contained in range?

- can't just use Range.contains(range, cell.position)
- could just use Range.contains(range, cell.range)
  where cell.range is either {x,y,1,1} or {x,y,2,1}
  note: this would return true if the cell is FULLY contained 
- use case for matching with OVERLAP? (partially contained)

#getCellAt 

- lookup cell at x,y

#search

- broken: iterates characters in query, using index as x
- uses getCellAt 

#writeRange 

- Range.contains(range, cell.position)
  the aim here is to clear everything within the range,
  so we want to delete cells that overlap even if they 
  are not fully contained within the range 
- pseudoCell business should be OK

#removeRange 

- Range.contains(range, cell.position)

#displaceRangeBy 

- Range.contains(range, point)

#moveRangeBy

- Range.contains(position) ...


----

Clipboard: large text?

H ホ
O  
T テ
E  
L ル
{"size": [[2,2],[10,2]]}


----

# Storage

1. Compression?
2. Error-resilient? accidentally inserting or deleting 1 character should not corrupt the whole document
3. Human-readable? it should be clear to the user that what is in the URL is no more than the grid content

## Plain
1. None
2. OK
3. OK

## Deflate compression
1. Best (10x)
2. A single change will break it 
3. Random characters

## JSON [[x,y,"c"]]
1. Bad (1.5x) 
2. Easy to fix a mistake, but it will still break 
3. Meh

## Custom: plain, but compress spans of space characters 
1. OK (5-10x)
2. OK
3. OK

\x00 %00 = 1 space (could also just be %20)
\x01 %01 followed by 1 number character 0-9
\x02 %02 ...


----

Wide monospace fonts

Inconsolata: variable width 100-150
Monaspace: variable width 100-125
